CONTEXT: PHOENIX PROJECT - FINAL REFINEMENT AND HARDENING CYCLE
Hello. The project architecture is now stable and technically sound. This is the final development cycle before full operational testing. Your mission is to address all remaining MAJOR WARNINGS identified in the last system audit.
This directive contains four mandatory tasks. You must execute all of them to complete this cycle.
Task 1: Refine Tactical Tip Display Logic
Problem: The system correctly identifies and prioritizes is_tactical=True tips, but the final message formatting might display an erroneous @None for tips that do not have an odd.
Required Action:
Navigate to the dossier_formatter.py module.
Locate the code block responsible for formatting and concatenating the final string for each tip (both in the ANÁLISE PRINCIPAL and SUGESTÕES TÁTICAS sections).
Implement a conditional check. Before attempting to display the odd, verify if the tip object has the is_tactical flag set to True or if its odd attribute is None.
If the condition is met, the part of the string that would display the odd (e.g., "@ {odd_value}") must be completely omitted. The output should be clean and not mention odds for tactical-only analyses.
Task 2: Resolve All Code Annotations (TODO/FIXME)
Problem: The codebase contains numerous (~55) TODO, FIXME, and HACK comments, representing technical debt and incomplete features.
Required Action:
Perform a global search across the entire project for the keywords TODO, FIXME, and HACK.
Iterate through each found comment and take one of the following actions:
Implement the Task: If the comment describes a necessary, pending feature or a required fix, implement the solution now according to the project's best practices.
Refactor the Code: If the comment marks a temporary or "hacky" solution, refactor it into a permanent, robust implementation.
Remove if Obsolete: If the comment is no longer relevant or the task has been implicitly solved by other changes, delete the comment.
The goal is a clean codebase, free of pending development annotations.
Task 3: Implement Dynamic Season Logic
Problem: The current season calculation logic (based on month >= 7) is static and will fail for leagues with non-standard calendars (e.g., MLS, J-League, A-League).
Required Action:
Refactor the function responsible for determining the season year (e.g., in api_client.py or master_analyzer.py).
The new logic must be dynamic. First, it should make an API call to the /leagues endpoint with the current=true parameter for the specific league being analyzed.
If this API call successfully returns an active season, use that season's year.
If the API call does not return a currently active season (e.g., during the off-season), implement a fallback mechanism to use the previous year (current_year - 1). This ensures the bot always finds the most recent available data.
Task 4: Calibrate Cache Expiration Times (TTL)
Problem: The current global 24-hour cache is too aggressive for time-sensitive data like market odds, leading to potentially outdated analyses.
Required Action:
Navigate to the cache configuration (likely in cache_manager.py or config.py).
Implement a differentiated Time-To-Live (TTL) strategy based on the type of data being cached.
Apply the following TTL values:
Market Odds: Set TTL to 1 hour.
Recent Match Statistics: Set TTL to 6 hours.
League Standings: Set TTL to 12 hours.
Historical Team Data (e.g., reputation): Can remain at a longer TTL, such as 7 days.
Final Mandate
The successful completion of these four tasks will mark the end of the primary development phase. The system will then be considered feature-complete and ready for a full-scale validation and testing period.