**SOFTWARE ENGINEERING SPECIFICATION: PROJECT PHOENIX (BOT BRAIN V2.0)**

**1. OVERALL CONTEXT & STRATEGIC GOAL:**

Hello. We are rebuilding the bot's analytical core. The current logic is flawed, leading to illogical suggestions (e.g., "Under 2.5 goals" for a dominant team) and a failure to generate tips.

The **strategic goal** is to transform the bot into a **Hybrid Analyst**, a system that combines mathematical value detection with a deep, contextual understanding of the sport, mimicking a true human expert.

**CRUCIAL INSTRUCTION ON FIDELITY:**
*   **STRICTLY MAINTAIN THE EXISTING PORTUGUESE NOMENCLATURE.** Do not translate any variable, function, or file names (e.g., `analisar_mercado_gols` MUST remain `analisar_mercado_gols`). This is a critical instruction.
*   The existing project structure must be respected. The goal is to refactor the *logic within* the files.

---

**2. REQUIRED IMPLEMENTATION: THE "ANALYTICAL FUNNEL"**

Implement a new, multi-layered analytical process to replace the current logic.

**LAYER 1: DYNAMIC QUALITY SCORE (QSC)**
*   **Requirement:** Create a dynamic quality score based on current team performance.
*   **Implementation:**
    1.  For each game, fetch the current league table.
    2.  Calculate a **Table-Based Score** for each team based on its rank (e.g., 1st place = 100, last place = 50).
    3.  Implement a **League Weighting Factor** (configurable in `config.py`) to assign a multiplier to each league (e.g., Premier League: 1.0, Brasileir√£o: 0.9). Final QSC = `(Table-Based Score * League Weighting Factor)`.
    4.  Implement a **Season Start Adjustment:** For the first 5 rounds of a league, the QSC should be a 50/50 weighted average of the new `Table-Based Score` and any old, static `Reputation Score`. From round 6 onwards, use 100% of the `Table-Based Score`.

**LAYER 2: WEIGHTED PERFORMANCE METRICS**
*   **Requirement:** Adjust raw stats based on the quality of the opposition ("Strength of Schedule").
*   **Implementation:**
    1.  For each team, analyze its last 5 matches.
    2.  For each past match, calculate **Weighted Stats** for metrics like goals, shots, corners, and xG. The weight must be derived from the opponent's **QSC (from Layer 1)**. A goal against a high-QSC opponent counts more than a goal against a low-QSC one.
    3.  The output must be new metrics like `WeightedGoalsFor`, `WeightedShotsAgainst`, `Average_xG_For`, etc.

**LAYER 3: TACTICAL SCRIPT & SANITY CHECK VETO**
*   **Requirement:** Create a game narrative ("Tactical Script") and use it to prevent absurd bets.
*   **Implementation:**
    1.  **Synthesize Data:** Compare teams' **QSC (Layer 1)** with their **Weighted Performance Metrics (Layer 2)**.
    2.  **Define the Script:** Classify the match into a `Tactical Script` (e.g., `EXPECTED_DOMINANCE`, `UPSET_ALERT`, `DEFENSIVE_BATTLE`).
    3.  **Implement the Veto System:** For each `Tactical Script`, define a list of **"Vetoed Markets"**. For `EXPECTED_DOMINANCE`, this list **must** include "Under 2.5 Goals".
    4.  **The Veto Check:** Before sending any bet, verify if its market is on the "Vetoed Markets" list. If it is, the bet **must be discarded**, regardless of its calculated value.

**LAYER 4: GUIDED MARKET ANALYSIS**
*   **Requirement:** All individual market analyzers (`goals_analyzer`, `corners_analyzer`, etc.) must use the new "Analytical Funnel".
*   **Implementation:**
    1.  The primary inputs for these analyzers must now be the **Weighted Performance Metrics (Layer 2)** and the **Tactical Script (Layer 3)**.
    2.  The `confianca` calculation must be directly influenced by the script. A bet that is coherent with the script should receive a confidence bonus; an incoherent bet should be penalized. This must resolve internal contradictions (e.g., high confidence on both Over and Under in the same game).

---

**3. FINALIZATION, CODE QUALITY & SYSTEM INTEGRITY CHECK (CRITICAL DELIVERY REQUIREMENT)**

*   **Requirement:** After implementing all the features above, we need to ensure the entire bot is **perfectly stable, error-free, and fully functional ("extremamente redondo")**.
*   **Implementation:**
    1.  **Full Code Sweep:** Perform a comprehensive scan across **all project files** (`.py` files).
    2.  **Error Correction:** Identify and fix any potential bugs, syntax errors, logical inconsistencies, or deprecated function calls, even in files not directly affected by the new features.
    3.  **Dependency Check:** Ensure all required libraries are correctly listed and imported.
    4.  **Integration Test:** Verify that all the new modules (`QSC`, `Weighted Metrics`, `Tactical Script`) are correctly integrated and that data flows seamlessly between them and the rest of the system (e.g., `db_manager`, `bot.py`).
    5.  **Functionality Guarantee:** The final delivered code must result in a bot that successfully runs, analyzes games, and sends logical, well-formatted tips to Telegram for all intended markets.

---

**4. FINAL DELIVERY:**

Provide the fully refactored and debugged code for all affected files. The expected outcome is a robust, intelligent, and fully operational bot that aligns with the "Hybrid Analyst" vision and is ready for immediate use.
