CONTEXT: PHOENIX PROJECT - FULL SYSTEM AUDIT & HEALTH CHECK
Hello. Before we proceed with further bug fixes, we need a complete and comprehensive audit of the entire project. Your mission is to act as a Senior Quality Assurance (QA) Architect. You must meticulously review the entire codebase, file by file, and generate a detailed "Project Health Report."
This is not a repair task. This is an inspection and reporting task. Your final output must be a clear, structured summary of the project's current state.
Your Mandate: The Audit Protocol
You are to analyze every .py file in the project, from main.py to the deepest analyzer in the analysts directory. For each major component or file, you must assess its status based on the "Phoenix Protocol" and general software engineering best practices.
Your final report must be structured as a checklist, categorized into three distinct levels of urgency.
The Required Output: The Project Health Report
Please generate your report using the following exact format. For each item, provide a brief, one-sentence explanation of your reasoning.
PROJECT PHOENIX - HEALTH AUDIT REPORT
ðŸ”´ CRITICAL ISSUES (System-Breaking Failures - Top Priority)
[ ] Item 1: Brief explanation of the critical issue.
[ ] Item 2: Brief explanation of the critical issue.
(List all issues that are currently preventing the bot from functioning correctly, such as the QSC data pipeline failure).
ðŸŸ¡ MAJOR WARNINGS (High-Risk & Incomplete Features - High Priority)
[ ] Item 1: Brief explanation of the high-risk issue.
[ ] Item 2: Brief explanation of the high-risk issue.
(List all issues that represent a significant risk to the quality of the analysis or are major features that are incomplete. Examples: The "Tactical Tip" handling logic bug, incomplete Knockout Intelligence, or hardcoded values like the 'Palmeiras' bug).
ðŸŸ¢ STABLE & FUNCTIONAL (Components Working as Designed - No Action Needed)
[ ] Component 1: e.g., api_client.py - Explanation: The module successfully fetches data from the API with proper error handling.
[ ] Component 2: e.g., VETO System - Explanation: The logic for vetoing bets based on the Tactical Script is correctly implemented in the analyzers.
(List all the major components or features that you can confirm are fully implemented, stable, and working according to the Phoenix Protocol. Be specific about what makes them "good").
ðŸ”µ OPPORTUNITIES FOR IMPROVEMENT (Minor Optimizations - Low Priority)
[ ] Item 1: Brief explanation of a potential improvement.
[ ] Item 2: Brief explanation of a potential improvement.
(List any minor issues or potential optimizations you've identified. Examples: code that could be slightly cleaner, logging that could be more descriptive, a mathematical formula that could be refined, etc. These are non-critical "nice-to-have" improvements).
